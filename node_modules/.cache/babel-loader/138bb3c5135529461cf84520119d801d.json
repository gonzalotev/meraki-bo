{"ast":null,"code":"const UNKNOWN_ERROR_MESSAGE = 'An unknown error occurred.';\nexport const parseErrorResponse = error => {\n  if (!error) {\n    return UNKNOWN_ERROR_MESSAGE;\n  }\n\n  if (!error.response) {\n    return error.message || UNKNOWN_ERROR_MESSAGE;\n  }\n\n  if (typeof error.response === 'string') {\n    return error.response;\n  }\n\n  const err = error.response.errors;\n\n  if (err && typeof err === 'object') {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in err) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (err.hasOwnProperty(key) && err[key].length) {\n        return err[key][0];\n      }\n    }\n  }\n\n  return UNKNOWN_ERROR_MESSAGE;\n};\nexport const getDefaultStatus = () => Object.freeze({\n  isFetching: false,\n  isError: false,\n  errorMessage: null,\n  error: null\n});\nexport const getStartStatus = () => Object.freeze({\n  isFetched: false,\n  isFetching: true,\n  isError: false,\n  errorMessage: null,\n  error: null\n});\nexport const getSuccessStatus = metaData => Object.freeze({\n  timestamp: new Date().toISOString(),\n  success: true,\n  isFetched: true,\n  isFetching: false,\n  isError: false,\n  errorMessage: null,\n  error: null,\n  metaData\n});\nexport const getErrorStatus = error => Object.freeze({\n  timestamp: new Date().toISOString(),\n  isFetched: false,\n  isFetching: false,\n  isError: true,\n  errorMessage: parseErrorResponse(error),\n  error\n});","map":{"version":3,"sources":["/home/gonza/src/meraki-bo/src/store/helper/statusStateFactory.js"],"names":["UNKNOWN_ERROR_MESSAGE","parseErrorResponse","error","response","message","err","errors","key","hasOwnProperty","length","getDefaultStatus","Object","freeze","isFetching","isError","errorMessage","getStartStatus","isFetched","getSuccessStatus","metaData","timestamp","Date","toISOString","success","getErrorStatus"],"mappings":"AAAA,MAAMA,qBAAqB,GAAG,4BAA9B;AAEA,OAAO,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AACzC,MAAI,CAACA,KAAL,EAAY;AACV,WAAOF,qBAAP;AACD;;AACD,MAAI,CAACE,KAAK,CAACC,QAAX,EAAqB;AACnB,WAAOD,KAAK,CAACE,OAAN,IAAiBJ,qBAAxB;AACD;;AACD,MAAI,OAAOE,KAAK,CAACC,QAAb,KAA0B,QAA9B,EAAwC;AACtC,WAAOD,KAAK,CAACC,QAAb;AACD;;AACD,QAAME,GAAG,GAAGH,KAAK,CAACC,QAAN,CAAeG,MAA3B;;AACA,MAAID,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAClC;AACA,SAAK,MAAME,GAAX,IAAkBF,GAAlB,EAAuB;AACrB;AACA,UAAIA,GAAG,CAACG,cAAJ,CAAmBD,GAAnB,KAA2BF,GAAG,CAACE,GAAD,CAAH,CAASE,MAAxC,EAAgD;AAC9C,eAAOJ,GAAG,CAACE,GAAD,CAAH,CAAS,CAAT,CAAP;AACD;AACF;AACF;;AAED,SAAOP,qBAAP;AACD,CAtBM;AAwBP,OAAO,MAAMU,gBAAgB,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAc;AAClDC,EAAAA,UAAU,EAAE,KADsC;AAElDC,EAAAA,OAAO,EAAE,KAFyC;AAGlDC,EAAAA,YAAY,EAAE,IAHoC;AAIlDb,EAAAA,KAAK,EAAE;AAJ2C,CAAd,CAA/B;AAOP,OAAO,MAAMc,cAAc,GAAG,MAAML,MAAM,CAACC,MAAP,CAAc;AAChDK,EAAAA,SAAS,EAAE,KADqC;AAEhDJ,EAAAA,UAAU,EAAE,IAFoC;AAGhDC,EAAAA,OAAO,EAAE,KAHuC;AAIhDC,EAAAA,YAAY,EAAE,IAJkC;AAKhDb,EAAAA,KAAK,EAAE;AALyC,CAAd,CAA7B;AAQP,OAAO,MAAMgB,gBAAgB,GAAGC,QAAQ,IAAIR,MAAM,CAACC,MAAP,CAAc;AACxDQ,EAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAD6C;AAExDC,EAAAA,OAAO,EAAE,IAF+C;AAGxDN,EAAAA,SAAS,EAAE,IAH6C;AAIxDJ,EAAAA,UAAU,EAAE,KAJ4C;AAKxDC,EAAAA,OAAO,EAAE,KAL+C;AAMxDC,EAAAA,YAAY,EAAE,IAN0C;AAOxDb,EAAAA,KAAK,EAAE,IAPiD;AAQxDiB,EAAAA;AARwD,CAAd,CAArC;AAWP,OAAO,MAAMK,cAAc,GAAGtB,KAAK,IAAIS,MAAM,CAACC,MAAP,CAAc;AACnDQ,EAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EADwC;AAEnDL,EAAAA,SAAS,EAAE,KAFwC;AAGnDJ,EAAAA,UAAU,EAAE,KAHuC;AAInDC,EAAAA,OAAO,EAAE,IAJ0C;AAKnDC,EAAAA,YAAY,EAAEd,kBAAkB,CAACC,KAAD,CALmB;AAMnDA,EAAAA;AANmD,CAAd,CAAhC","sourcesContent":["const UNKNOWN_ERROR_MESSAGE = 'An unknown error occurred.';\n\nexport const parseErrorResponse = error => {\n  if (!error) {\n    return UNKNOWN_ERROR_MESSAGE;\n  }\n  if (!error.response) {\n    return error.message || UNKNOWN_ERROR_MESSAGE;\n  }\n  if (typeof error.response === 'string') {\n    return error.response;\n  }\n  const err = error.response.errors;\n  if (err && typeof err === 'object') {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in err) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (err.hasOwnProperty(key) && err[key].length) {\n        return err[key][0];\n      }\n    }\n  }\n\n  return UNKNOWN_ERROR_MESSAGE;\n};\n\nexport const getDefaultStatus = () => Object.freeze({\n  isFetching: false,\n  isError: false,\n  errorMessage: null,\n  error: null,\n});\n\nexport const getStartStatus = () => Object.freeze({\n  isFetched: false,\n  isFetching: true,\n  isError: false,\n  errorMessage: null,\n  error: null,\n});\n\nexport const getSuccessStatus = metaData => Object.freeze({\n  timestamp: new Date().toISOString(),\n  success: true,\n  isFetched: true,\n  isFetching: false,\n  isError: false,\n  errorMessage: null,\n  error: null,\n  metaData,\n});\n\nexport const getErrorStatus = error => Object.freeze({\n  timestamp: new Date().toISOString(),\n  isFetched: false,\n  isFetching: false,\n  isError: true,\n  errorMessage: parseErrorResponse(error),\n  error,\n});\n"]},"metadata":{},"sourceType":"module"}