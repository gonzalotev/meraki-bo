{"ast":null,"code":"import { go, goBack, goForward, back, forward, push, replace, locationChangeAction } from './actions';\nimport { createRouterMiddleware } from './middleware';\nimport { createRouterReducer } from './reducer';\nexport const createReduxHistoryContext = _ref => {\n  let {\n    history,\n    routerReducerKey = 'router',\n    reduxTravelling = false,\n    showHistoryAction = false,\n    selectRouterState,\n    savePreviousLocations = 0,\n    batch,\n    reachGlobalHistory\n  } = _ref;\n  let listenObject = false; // @ts-ignore\n\n  const callListener = (listener, location, action) => listenObject ? listener({\n    location,\n    action\n  }) : listener(location, action);\n\n  if (typeof batch !== 'function') {\n    batch = fn => {\n      fn();\n    };\n  }\n  /** ********************************************  REDUX REDUCER ***************************************************** */\n\n\n  if (typeof selectRouterState !== 'function') {\n    selectRouterState = state => state[routerReducerKey];\n  }\n\n  const routerReducer = createRouterReducer({\n    savePreviousLocations\n  });\n  const routerMiddleware = createRouterMiddleware({\n    history,\n    showHistoryAction\n  });\n  /** ******************************************  REDUX TRAVELLING  ************************************************** */\n\n  let isReduxTravelling = false;\n\n  const handleReduxTravelling = store => {\n    const locationEqual = (loc1, loc2) => loc1.pathname === loc2.pathname && loc1.search === loc2.search && loc1.hash === loc2.hash;\n\n    return store.subscribe(() => {\n      // @ts-ignore\n      const sLoc = selectRouterState(store.getState()).location;\n      const hLoc = history.location;\n\n      if (sLoc && hLoc && !locationEqual(sLoc, hLoc)) {\n        isReduxTravelling = true;\n        history.push({\n          pathname: sLoc.pathname,\n          search: sLoc.search,\n          hash: sLoc.hash\n        });\n      }\n    });\n  };\n  /** ******************************************  REDUX FIRST HISTORY   *********************************************** */\n\n\n  const createReduxHistory = store => {\n    let registeredCallback = []; // init location store\n\n    store.dispatch(locationChangeAction(history.location, history.action));\n\n    if (reduxTravelling) {\n      handleReduxTravelling(store);\n    } // listen to history API\n    // @ts-ignore\n\n\n    history.listen((location, action) => {\n      // support history v5\n      // @ts-ignore\n      if (location.location) {\n        // @ts-ignore\n        action = location.action; // @ts-ignore\n\n        location = location.location;\n        listenObject = true;\n      }\n\n      if (isReduxTravelling) {\n        isReduxTravelling = false; // notify registered callback travelling\n        // @ts-ignore\n\n        const routerState = selectRouterState(store.getState());\n        registeredCallback.forEach(c => callListener(c, routerState.location, routerState.action));\n        return;\n      } // @ts-ignore\n\n\n      batch(() => {\n        store.dispatch(locationChangeAction(location, action)); // @ts-ignore\n\n        const routerState = selectRouterState(store.getState());\n        registeredCallback.forEach(c => callListener(c, routerState.location, routerState.action));\n      });\n    }); // listen to reach globalHistory (support \"navigate\")\n\n    if (reachGlobalHistory) {\n      reachGlobalHistory.listen(_ref2 => {\n        let {\n          location,\n          action\n        } = _ref2;\n\n        if (action !== `POP`) {\n          const loc = {\n            pathname: location.pathname,\n            search: location.search,\n            hash: location.hash,\n            key: location.key,\n            state: location.state\n          }; // @ts-ignore\n\n          batch(() => {\n            // @ts-ignore\n            store.dispatch(locationChangeAction(loc, action)); // @ts-ignore\n\n            const routerState = selectRouterState(store.getState());\n            registeredCallback.forEach(c => callListener(c, routerState.location, routerState.action));\n          });\n        }\n      });\n    } // @ts-ignore\n\n\n    return {\n      block: history.block,\n      createHref: history.createHref,\n      push: function () {\n        return store.dispatch(push(...arguments));\n      },\n      replace: function () {\n        return store.dispatch(replace(...arguments));\n      },\n      go: function () {\n        return store.dispatch(go(...arguments));\n      },\n      // @ts-ignore\n      goBack: function () {\n        return store.dispatch(goBack(...arguments));\n      },\n      // @ts-ignore\n      goForward: function () {\n        return (// @ts-ignore\n          store.dispatch(goForward(...arguments))\n        );\n      },\n      // @ts-ignore\n      back: function () {\n        return store.dispatch(back(...arguments));\n      },\n      // @ts-ignore\n      forward: function () {\n        return store.dispatch(forward(...arguments));\n      },\n      listen: callback => {\n        if (registeredCallback.indexOf(callback) < 0) {\n          registeredCallback.push(callback);\n        }\n\n        return () => {\n          registeredCallback = registeredCallback.filter(c => c !== callback);\n        };\n      },\n\n      // @ts-ignore\n      get location() {\n        // @ts-ignore\n        return selectRouterState(store.getState()).location;\n      },\n\n      // @ts-ignore\n      get action() {\n        // @ts-ignore\n        return selectRouterState(store.getState()).action;\n      },\n\n      get length() {\n        // @ts-ignore\n        return history.length;\n      },\n\n      // @ts-ignore\n      get listenObject() {\n        return listenObject;\n      }\n\n    };\n  };\n\n  return {\n    routerReducer,\n    routerMiddleware,\n    createReduxHistory\n  };\n};","map":{"version":3,"mappings":"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","names":["go","goBack","goForward","back","forward","push","replace","locationChangeAction","createRouterMiddleware","createRouterReducer","createReduxHistoryContext","history","routerReducerKey","reduxTravelling","showHistoryAction","selectRouterState","savePreviousLocations","batch","reachGlobalHistory","listenObject","callListener","listener","location","action","fn","state","routerReducer","routerMiddleware","isReduxTravelling","handleReduxTravelling","store","locationEqual","loc1","loc2","pathname","search","hash","subscribe","sLoc","getState","hLoc","createReduxHistory","registeredCallback","dispatch","listen","routerState","forEach","c","loc","key","block","createHref","callback","indexOf","filter","length"],"sources":["/home/gonza/src/meraki-bo/node_modules/redux-first-history/src/create.ts"],"sourcesContent":["import type { History, Location } from 'history';\nimport type { Middleware, Reducer, Store } from 'redux';\nimport type { ReachHistory } from './reachify.types';\nimport {\n   go,\n   goBack,\n   goForward,\n   back,\n   forward,\n   push,\n   replace,\n   locationChangeAction,\n} from './actions';\nimport { createRouterMiddleware } from './middleware';\nimport { createRouterReducer, RouterState } from './reducer';\n\nexport interface IHistoryContextOptions {\n   history: History;\n   routerReducerKey?: string;\n   reduxTravelling?: boolean;\n   showHistoryAction?: boolean;\n   selectRouterState?: <S>(state: S) => RouterState;\n   savePreviousLocations?: number;\n   batch?: (callback: () => void) => void;\n   reachGlobalHistory?: ReachHistory;\n}\n\nexport interface IHistoryContext {\n   createReduxHistory: (store: Store) => History & { listenObject: boolean };\n   routerMiddleware: Middleware;\n   routerReducer: Reducer<RouterState>;\n}\n\nexport const createReduxHistoryContext = ({\n   history,\n   routerReducerKey = 'router',\n   reduxTravelling = false,\n   showHistoryAction = false,\n   selectRouterState,\n   savePreviousLocations = 0,\n   batch,\n   reachGlobalHistory,\n}: IHistoryContextOptions): IHistoryContext => {\n   let listenObject = false;\n\n   // @ts-ignore\n   const callListener = (listener, location, action) =>\n      listenObject ? listener({ location, action }) : listener(location, action);\n\n   if (typeof batch !== 'function') {\n      batch = fn => {\n         fn();\n      };\n   }\n\n   /** ********************************************  REDUX REDUCER ***************************************************** */\n\n   if (typeof selectRouterState !== 'function') {\n      selectRouterState = state => state[routerReducerKey];\n   }\n\n   const routerReducer = createRouterReducer({ savePreviousLocations });\n   const routerMiddleware = createRouterMiddleware({ history, showHistoryAction });\n\n   /** ******************************************  REDUX TRAVELLING  ************************************************** */\n\n   let isReduxTravelling = false;\n\n   const handleReduxTravelling = (store: Store) => {\n      const locationEqual = (loc1: Location, loc2: Location) =>\n         loc1.pathname === loc2.pathname && loc1.search === loc2.search && loc1.hash === loc2.hash;\n\n      return store.subscribe(() => {\n         // @ts-ignore\n         const sLoc = selectRouterState(store.getState()).location;\n         const hLoc = history.location;\n         if (sLoc && hLoc && !locationEqual(sLoc, hLoc)) {\n            isReduxTravelling = true;\n            history.push({ pathname: sLoc.pathname, search: sLoc.search, hash: sLoc.hash });\n         }\n      });\n   };\n\n   /** ******************************************  REDUX FIRST HISTORY   *********************************************** */\n\n   const createReduxHistory = (store: Store): History & { listenObject: boolean } => {\n      let registeredCallback: unknown[] = [];\n\n      // init location store\n      store.dispatch(locationChangeAction(history.location, history.action));\n\n      if (reduxTravelling) {\n         handleReduxTravelling(store);\n      }\n      // listen to history API\n      // @ts-ignore\n      history.listen((location, action) => {\n         // support history v5\n         // @ts-ignore\n         if (location.location) {\n            // @ts-ignore\n            action = location.action;\n            // @ts-ignore\n            location = location.location;\n            listenObject = true;\n         }\n\n         if (isReduxTravelling) {\n            isReduxTravelling = false;\n            // notify registered callback travelling\n            // @ts-ignore\n            const routerState = selectRouterState(store.getState());\n            registeredCallback.forEach(c =>\n               callListener(c, routerState.location, routerState.action),\n            );\n            return;\n         }\n         // @ts-ignore\n         batch(() => {\n            store.dispatch(locationChangeAction(location, action));\n            // @ts-ignore\n            const routerState = selectRouterState(store.getState());\n            registeredCallback.forEach(c =>\n               callListener(c, routerState.location, routerState.action),\n            );\n         });\n      });\n\n      // listen to reach globalHistory (support \"navigate\")\n      if (reachGlobalHistory) {\n         reachGlobalHistory.listen(({ location, action }) => {\n            if (action !== `POP`) {\n               const loc = {\n                  pathname: location.pathname,\n                  search: location.search,\n                  hash: location.hash,\n                  key: location.key,\n                  state: location.state,\n               };\n               // @ts-ignore\n               batch(() => {\n                  // @ts-ignore\n                  store.dispatch(locationChangeAction(loc, action));\n                  // @ts-ignore\n                  const routerState = selectRouterState(store.getState());\n                  registeredCallback.forEach(c =>\n                     callListener(c, routerState.location, routerState.action),\n                  );\n               });\n            }\n         });\n      }\n\n      // @ts-ignore\n      return {\n         block: history.block,\n         createHref: history.createHref,\n         push: (...args: Parameters<History['push']>) => store.dispatch(push(...args)),\n         replace: (...args: Parameters<History['replace']>) => store.dispatch(replace(...args)),\n         go: (...args: Parameters<History['go']>) => store.dispatch(go(...args)),\n         // @ts-ignore\n         goBack: (...args: Parameters<History['goBack']>) => store.dispatch(goBack(...args)),\n         // @ts-ignore\n         goForward: (...args: Parameters<History['goForward']>) =>\n            // @ts-ignore\n            store.dispatch(goForward(...args)),\n         // @ts-ignore\n         back: (...args: Parameters<History['back']>) => store.dispatch(back(...args)),\n         // @ts-ignore\n         forward: (...args: Parameters<History['forward']>) => store.dispatch(forward(...args)),\n         listen: callback => {\n            if (registeredCallback.indexOf(callback) < 0) {\n               registeredCallback.push(callback);\n            }\n            return () => {\n               registeredCallback = registeredCallback.filter(c => c !== callback);\n            };\n         },\n         // @ts-ignore\n         get location() {\n            // @ts-ignore\n            return selectRouterState(store.getState()).location;\n         },\n         // @ts-ignore\n         get action() {\n            // @ts-ignore\n            return selectRouterState(store.getState()).action;\n         },\n         get length() {\n            // @ts-ignore\n            return history.length;\n         },\n         // @ts-ignore\n         get listenObject() {\n            return listenObject;\n         },\n      };\n   };\n\n   return { routerReducer, routerMiddleware, createReduxHistory };\n};\n"]},"metadata":{},"sourceType":"module"}