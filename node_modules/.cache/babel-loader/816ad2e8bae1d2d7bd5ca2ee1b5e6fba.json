{"ast":null,"code":"export const CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\nexport const LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\nexport const locationChangeAction = (location, action) => ({\n  type: LOCATION_CHANGE,\n  payload: {\n    location,\n    action\n  }\n});\n\nfunction updateLocation(method) {\n  // @ts-ignore\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: {\n        method,\n        args\n      }\n    };\n  };\n}\n\nexport const push = updateLocation('push');\nexport const replace = updateLocation('replace');\nexport const go = updateLocation('go');\nexport const goBack = updateLocation('goBack');\nexport const goForward = updateLocation('goForward');\nexport const back = updateLocation('back');\nexport const forward = updateLocation('forward');","map":{"version":3,"mappings":"AAGA,OAAO,MAAMA,mBAAmB,GAAG,8BAA5B;AACP,OAAO,MAAMC,eAAe,GAAG,0BAAxB;AAYP,OAAO,MAAMC,oBAAoB,GAAG,CAACC,QAAD,EAAqBC,MAArB,MAAyC;AAC1EC,MAAI,EAAEJ,eADoE;AAE1EK,SAAO,EAAE;AAAEH,YAAF;AAAYC;AAAZ;AAFiE,CAAzC,CAA7B;;AAKP,SAASG,cAAT,CAAkDC,MAAlD,EAA2D;AACxD;AACA,SAAO;AAAA,sCAAIC,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAmD;AACvDJ,UAAI,EAAEL,mBADiD;AAEvDM,aAAO,EAAE;AAAEE,cAAF;AAAUC;AAAV;AAF8C,KAAnD;AAAA,GAAP;AAIF;;AAED,OAAO,MAAMC,IAAI,GAA0DH,cAAc,CAAC,MAAD,CAAlF;AACP,OAAO,MAAMI,OAAO,GACjBJ,cAAc,CAAC,SAAD,CADV;AAEP,OAAO,MAAMK,EAAE,GAAwDL,cAAc,CAAC,IAAD,CAA9E;AACP,OAAO,MAAMM,MAAM,GAAsBN,cAAc,CAAC,QAAD,CAAhD;AACP,OAAO,MAAMO,SAAS,GAAsBP,cAAc,CAAC,WAAD,CAAnD;AACP,OAAO,MAAMQ,IAAI,GAAsBR,cAAc,CAAC,MAAD,CAA9C;AACP,OAAO,MAAMS,OAAO,GAAsBT,cAAc,CAAC,SAAD,CAAjD","names":["CALL_HISTORY_METHOD","LOCATION_CHANGE","locationChangeAction","location","action","type","payload","updateLocation","method","args","push","replace","go","goBack","goForward","back","forward"],"sources":["/home/gonza/src/meraki-bo/node_modules/redux-first-history/src/actions.ts"],"sourcesContent":["import type { Location, Action, History } from 'history';\nimport type { AnyAction as ReduxAction } from 'redux';\n\nexport const CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\nexport const LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\n\n//support history v4/ v5\nexport type HistoryMethods =\n   | 'push'\n   | 'replace'\n   | 'go'\n   | 'goBack'\n   | 'goForward'\n   | 'back'\n   | 'forward';\n\nexport const locationChangeAction = (location: Location, action: Action) => ({\n   type: LOCATION_CHANGE,\n   payload: { location, action } as { location: Location; action: Action },\n});\n\nfunction updateLocation<T extends HistoryMethods>(method: T) {\n   // @ts-ignore\n   return (...args: Parameters<History[T]>): ReduxAction => ({\n      type: CALL_HISTORY_METHOD,\n      payload: { method, args },\n   });\n}\n\nexport const push: (...args: Parameters<History['push']>) => ReduxAction = updateLocation('push');\nexport const replace: (...args: Parameters<History['replace']>) => ReduxAction =\n   updateLocation('replace');\nexport const go: (...args: Parameters<History['go']>) => ReduxAction = updateLocation('go');\nexport const goBack: () => ReduxAction = updateLocation('goBack');\nexport const goForward: () => ReduxAction = updateLocation('goForward');\nexport const back: () => ReduxAction = updateLocation('back');\nexport const forward: () => ReduxAction = updateLocation('forward');\n\nexport type RouterActions =\n   | ReturnType<typeof push>\n   | ReturnType<typeof replace>\n   | ReturnType<typeof go>\n   | ReturnType<typeof goBack>\n   | ReturnType<typeof goForward>\n   | ReturnType<typeof locationChangeAction>\n   | ReturnType<typeof back>\n   | ReturnType<typeof forward>;\n"]},"metadata":{},"sourceType":"module"}